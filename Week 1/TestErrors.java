/*Program Name: TestErrors.java
Author: Dilshad Haleem and Adam Carpenter (introduced errors)
Class: CSC 110
Date Written:5/30/19
Brief Description: This program introduces errors in the
class TestErrors and then record the error messages
generated by the compiler.
Description of inputs: N/A
Description of outputs: Should print "An Emergency Broadcast" in its original form
*/
public class TestErrors {
	public static void main(String[] args) {
		System.out.println("An Emergency Broadcast");
	}
}

/*Tested cases:

1. Change TestErrors to testErrors

TestErrors.java:11: error: class testErrors is public, should be declared in a file named testErrors.java
public class testErrors {
       ^
1 error


2. Change Emergency to emergency
No debugger output. This is because strings can be whatever we want, 
with the exception of a few special characters, which is what escape codes are for.


3. Remove the first quotation mark in the string

TestErrors.java:13: error: ')' expected
                System.out.println(An Emergency Broadcast");
                                     ^
TestErrors.java:13: error: unclosed string literal
                System.out.println(An Emergency Broadcast");
                                                         ^
TestErrors.java:13: error: not a statement
                System.out.println(An Emergency Broadcast");
                                                ^
3 errors


4. change main to man
No debugger output. This change will produce a runtime error. Even though "man" is a perfectly valid function name,
when we try to run the class the interpreter looks for main.


5. Remove semicolon at the end of println statement

TestErrors.java:13: error: ';' expected
                System.out.println("An Emergency Broadcast")
                                                            ^
1 error


6. Remove the last brace in the program.

TestErrors.java:14: error: reached end of file while parsing
        }
         ^
1 error
*/